{"version":3,"sources":["Components/Header.jsx","API/PostService.js","hooks/useFetching.js","utils/pages.js","Components/Items/MyButton.jsx","Components/Items/MyInput.jsx","Components/AddPosts.jsx","Components/Post.jsx","Components/Preloader.jsx","Components/PagesArray.jsx","Components/PageByPage.jsx","Components/DisplayPosts.jsx","Components/Items/MySelect.jsx","Components/SelectedNumber.jsx","pages/Posts.jsx","hooks/useObserver.js","pages/OpenPost.jsx","App.js","reportWebVitals.js","index.js"],"names":["Header","className","to","PostService","limit","page","axios","get","params","_limit","_page","response","id","useFetching","callback","useState","isLoading","setIsLoading","error","setError","a","message","getPageCount","totalCount","Math","ceil","MyButton","props","onClick","style","backgroundColor","bgColor","name","MyInput","placeholder","value","onChange","type","AddPosts","createPost","title","body","post","setPost","action","e","target","preventDefault","trim","length","newPost","Date","now","console","log","Post","sortedNews","removePost","router","useNavigate","map","item","index","Preloader","src","alt","PagesArray","getPagesArr","PageByPage","numberPage","totalPages","setNumberPage","pagesArr","i","push","getPagesArray","pages","DisplayPosts","setIsActive","setNews","defaultChecked","htmlFor","MySelect","options","defaultValue","disabled","option","SelectedNumber","isActive","setLimit","Posts","news","allNews","setAllNews","setTotalPages","lastEl","useRef","getAll","allPosts","data","allFetchPosts","useEffect","posts","checkIsActive","headers","fetchPosts","postError","arr1","arr2","searchQuery","setSearchQuery","useMemo","arr","choiceNews","filter","toLowerCase","includes","ref","canLoad","observer","current","disconnect","IntersectionObserver","entries","isIntersecting","observe","useObserver","currentTarget","OpenPost","useParams","getByID","fetchPostById","App","exact","path","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8fda48a2.chunk.js","sourcesContent":["import React from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\n\r\nexport default function Header() {\r\n    return (\r\n        <div className='header'>\r\n            <NavLink to='/posts'>Posts</NavLink>\r\n        </div>\r\n    )\r\n}\r\n","import axios from \"axios\"\r\n\r\nexport class PostService {\r\n    static async getAll(limit, page) {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts', {\r\n            params: {\r\n                _limit: limit,\r\n                _page: page\r\n            }\r\n        })\r\n        return response\r\n    }\r\n\r\n    static async getByID(id) {\r\n        const response = await axios.get('https://jsonplaceholder.typicode.com/posts/' + id)\r\n        return response\r\n    }\r\n}\r\n\r\n\r\n\r\n","import { useState } from \"react\"\r\n\r\nexport const useFetching = (callback) => {\r\n    const [isLoading, setIsLoading] = useState(false)\r\n    const [error, setError] = useState('')\r\n\r\n    const fetching = async () => {\r\n        try {\r\n            setIsLoading(true)\r\n            await callback()\r\n        } catch (error) {\r\n            setError(error.message)\r\n        } finally {\r\n            setIsLoading(false)\r\n        }\r\n    }\r\n    return [fetching, isLoading, error]\r\n}\r\n","export const getPageCount = (totalCount, limit) => {\r\n    return Math.ceil( totalCount / limit )\r\n}\r\n\r\nexport const getPagesArray = (totalPages) => {\r\n    let pagesArr = []\r\n    for (let i = 0; i < totalPages; i++) {\r\n        pagesArr.push(i + 1)\r\n    }\r\n    return pagesArr\r\n}","import React from 'react'\r\n\r\nexport default function MyButton(props) {\r\n    return (\r\n        <button onClick={props.onClick} className='myButton' style={{ backgroundColor: props.bgColor }}>\r\n            {props.name}\r\n        </button>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MyInput({ placeholder, value, onChange }) {\r\n    return (\r\n        <>\r\n            <input className='myInput' type='text' placeholder={placeholder} value={value} onChange={onChange} />\r\n        </>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport MyButton from './Items/MyButton'\r\nimport MyInput from './Items/MyInput'\r\n\r\nexport default function AddPosts({createPost}) {\r\n\r\n    const [post, setPost] = useState({ id: 6, title: '', body: '' })\r\n\r\n    const addPost = (e) => {\r\n        e.preventDefault()\r\n        if (post.title.trim().length > 6 && post.title.trim().length < 40) {\r\n            const newPost = {\r\n                ...post, id: Date.now()\r\n            }\r\n            createPost(newPost)\r\n            setPost({ title: '', body: '' })\r\n        } else {\r\n            console.log('Заголовок не може бути меншим за 6 символів і більшим за 40')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <form className='addPostForm' action=\"\">\r\n            <div>Add new post</div>\r\n            <MyInput placeholder='Name' value={post.title} onChange={e => setPost({ ...post, title: e.target.value })} />\r\n            <MyInput placeholder='Content' value={post.body} onChange={e => setPost({ ...post, body: e.target.value })} />\r\n            <MyButton name='Add post' onClick={addPost} />\r\n        </form>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport MyButton from './Items/MyButton'\r\nimport {useNavigate} from 'react-router-dom';\r\n\r\nexport default function Post({ sortedNews, removePost }) {\r\n\r\n    const router = useNavigate()\r\n\r\n    return (\r\n        <div>\r\n            {sortedNews.length !== 0\r\n                ? sortedNews.map((item, index) =>\r\n                    <div className='post' key={index}>\r\n                        <div>\r\n                            <h5>{item.id + '. ' + item.title}</h5>\r\n                            <div className='post__text'>{item.body}</div>\r\n                        </div>\r\n                        <div className='removePost'>\r\n                            <MyButton name='Edit post' onClick={() => router(`/posts/${item.id}`)} bgColor='rgb(211, 248, 204)' />\r\n                            <MyButton name='Remove post' onClick={() => removePost(item)} bgColor='rgb(251, 218, 218)' />\r\n                        </div>\r\n                    </div>)\r\n\r\n                : <div>Постів не знайдено</div>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function Preloader() {\r\n    return (\r\n        <div className='spiner'>\r\n            <img src=\"https://thumbs.gfycat.com/ArtisticShoddyKudu-size_restricted.gif\" alt=\"\" />\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function PagesArray({ getPagesArr }) {\r\n    return (\r\n        <div className='pagesArr'>\r\n            {\r\n                getPagesArr()\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { getPagesArray } from '../utils/pages'\r\nimport PagesArray from './PagesArray'\r\nimport Post from './Post'\r\nimport Preloader from './Preloader'\r\n\r\nexport default function PageByPage({ sortedNews, removePost, numberPage, totalPages, setNumberPage, isLoading }) {\r\n\r\n    let pagesArr = getPagesArray(totalPages) // реалізація додавання масива кількості сторінок\r\n\r\n    function getPagesArr() {\r\n       return pagesArr.map(pages =>\r\n            <span key={pages} className='pageArr' onClick={() => setNumberPage(pages)}>{pages === numberPage\r\n                ? <b>{pages}</b>\r\n                : pages\r\n            }</span>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <>\r\n            {isLoading\r\n                ? <Preloader />\r\n                : <>\r\n                    <Post sortedNews={sortedNews} removePost={removePost} />\r\n                    <PagesArray getPagesArr={getPagesArr} />\r\n                </>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function DisplayPosts({setIsActive, setNews, setNumberPage}) {\r\n    \r\n    const displayPosts1 = () => {\r\n        setIsActive(false)\r\n        console.log('setIsActive - false')\r\n        setNumberPage(1)\r\n    }\r\n    const displayPosts2 = () => {\r\n        setIsActive(true)\r\n        setNews([])\r\n        setNumberPage(1)\r\n        console.log('setIsActive - true')\r\n    }\r\n\r\n    return (\r\n        <span className='displayPosts'>\r\n            <span>Вигляд сторінки:</span>\r\n            <input type='radio' id='displayChoice1' value='displayPosts1' name='displayPosts'\r\n                defaultChecked\r\n                onChange={displayPosts1}\r\n            />\r\n            <label htmlFor='displayChoice1'>Посторінково</label>\r\n            <input type='radio' id='displayChoice2' value='displayPosts2' name='displayPosts'\r\n                onChange={displayPosts2}\r\n            />\r\n            <label htmlFor='displayChoice2'>Нескінченний скрол</label> \r\n        </span>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function MySelect({ options, defaultValue, value, onChange, disabled }) {\r\n    return (\r\n        <select className='mySelect' disabled={disabled} value={value} onChange={(e) => onChange(e.target.value)}>\r\n\r\n            <option disabled value='d'>{defaultValue}</option>\r\n            {options.map(option => <option key={option.value} value={option.value}>{option.name}</option>)}\r\n            \r\n        </select>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nimport MySelect from './Items/MySelect'\r\n\r\n\r\nexport default function SelectedNumber({ limit, isActive, setLimit }) {\r\n\r\n    const [options] = useState([\r\n        { name: '10 постів', value: 10 },\r\n        { name: '6 постів', value: 6 },\r\n        { name: '20 постів', value: 20 },\r\n        { name: 'Показати всі', value: -1 },])\r\n\r\n    return (\r\n        <>\r\n            <MySelect\r\n                value={limit}\r\n                onChange={value => setLimit(value)}\r\n                defaultValue='Відображати'\r\n                options={options}\r\n                disabled={isActive}\r\n            />\r\n        </>\r\n    )\r\n}\r\n","import React, { useEffect, useMemo, useRef, useState } from 'react'\r\nimport { PostService } from '../API/PostService'\r\nimport { useFetching } from '../hooks/useFetching'\r\nimport { getPageCount } from '../utils/pages'\r\nimport AddPosts from '../Components/AddPosts'\r\nimport MyInput from '../Components/Items/MyInput'\r\nimport Post from '../Components/Post'\r\nimport Preloader from '../Components/Preloader'\r\nimport PageByPage from '../Components/PageByPage'\r\nimport { useObserver } from '../hooks/useObserver'\r\nimport DisplayPosts from '../Components/DisplayPosts'\r\nimport SelectedNumber from '../Components/SelectedNumber'\r\n\r\nexport default function Posts() {\r\n\r\n    const [news, setNews] = useState([])\r\n    const [allNews, setAllNews] = useState([]) // всі існуючи пости\r\n    const [totalPages, setTotalPages] = useState(0)\r\n    const [limit, setLimit] = useState(10)\r\n    const [numberPage, setNumberPage] = useState(1)\r\n\r\n    const [isActive, setIsActive] = useState(false) // показує чи активний радіобаттон\r\n\r\n    const lastEl = useRef()\r\n\r\n    // реалізація пошуку постів серед всіх існуючих \r\n    const [allFetchPosts] = useFetching(async () => {\r\n        const allPosts = await PostService.getAll()\r\n        setAllNews(allPosts.data)\r\n    })\r\n\r\n    useEffect(() => {\r\n        allFetchPosts()\r\n    }, [])\r\n    // реалізація пошуку постів серед всіх існуючих \r\n\r\n    // Реалізація завантаження постів через axios\r\n    const [fetchPosts, isLoading, postError] = useFetching(async () => {\r\n        const posts = await PostService.getAll(limit, numberPage)\r\n        checkIsActive(isActive, [...news, ...posts.data], posts.data)\r\n\r\n        const totalCount = posts.headers['x-total-count']\r\n        setTotalPages(getPageCount(totalCount, limit))\r\n    })\r\n\r\n    function checkIsActive(isActive, arr1, arr2) {\r\n        isActive ? setNews(arr1) : setNews(arr2) // Визначає отрисовку сторінки \r\n    }\r\n\r\n    useEffect(() => {\r\n        fetchPosts()\r\n    }, [numberPage, limit, isActive])\r\n    // Реалізація завантаження постів через axios\r\n\r\n    // Реалізація пошуку\r\n    const [searchQuery, setSearchQuery] = useState('')\r\n\r\n    function choiceNews(searchQuery, arr, arr2) {\r\n        if (searchQuery === '') return arr\r\n        return arr2\r\n    }\r\n\r\n    const sortedNews = useMemo(() => {\r\n        const arr = choiceNews(searchQuery, [...news], [...allNews])\r\n        return arr.filter(post => post.title.toLowerCase().includes(searchQuery.toLowerCase().trim()))\r\n    }, [news, searchQuery])\r\n    // Реалізація пошуку\r\n\r\n    // Реалізація додавання та видалення постів\r\n    const createPost = (newPost) => {\r\n        setNews([...news, newPost])\r\n    }\r\n\r\n    const removePost = (post) => {\r\n        setNews(news.filter(filter => filter.id !== post.id))\r\n    }\r\n    // Реалізація додавання та видалення постів\r\n\r\n    // Реалізація безкінечного довантаження постів\r\n    useObserver(isActive, lastEl, numberPage < totalPages, isLoading, () => {\r\n        setNumberPage(numberPage + 1)\r\n    })\r\n    // Реалізація безкінечного довантаження постів\r\n\r\n    return (\r\n        <div>\r\n            <AddPosts createPost={createPost} />\r\n            <MyInput placeholder='Search' value={searchQuery} onChange={(e) => setSearchQuery(e.currentTarget.value)} />\r\n            <SelectedNumber isActive={isActive} limit={limit} setLimit={setLimit} />\r\n            <DisplayPosts setIsActive={setIsActive} setNews={setNews} setNumberPage={setNumberPage} />\r\n\r\n            {postError &&\r\n                <div>Щось пішло не так ${postError}</div>\r\n            }\r\n\r\n            {isActive\r\n                ? <>\r\n                    <Post sortedNews={sortedNews} removePost={removePost} />\r\n                    < div className='lustEl' ref={lastEl} />\r\n                    {numberPage < totalPages\r\n                        ? <Preloader />\r\n                        : <h2>Пости не знайдені</h2>\r\n                    }\r\n                </>\r\n                : <PageByPage isLoading={isLoading} sortedNews={sortedNews}\r\n                    removePost={removePost} numberPage={numberPage} totalPages={totalPages}\r\n                    setNumberPage={setNumberPage} />\r\n            }\r\n        </div >\r\n    )\r\n}\r\n\r\n","import { useEffect, useRef } from \"react\";\r\n\r\nexport const useObserver = (isActive, ref, canLoad, isLoading, callback) => {\r\n    const observer = useRef()\r\n    useEffect(() => {\r\n        if (isActive) {\r\n            if (isLoading) return;\r\n            if (observer.current) observer.current.disconnect();\r\n\r\n            var cb = function (entries, observer) {\r\n                if (entries[0].isIntersecting && canLoad) {\r\n                    callback()\r\n                }\r\n            };\r\n            observer.current = new IntersectionObserver(cb);\r\n            observer.current.observe(ref.current)\r\n        }\r\n    }, [isLoading])\r\n}","import React, { useEffect, useState } from 'react'\r\nimport { useParams } from 'react-router'\r\nimport { PostService } from '../API/PostService'\r\nimport Preloader from '../Components/Preloader'\r\nimport { useFetching } from '../hooks/useFetching'\r\n\r\nexport default function OpenPost() {\r\n    const params = useParams()\r\n    const [post, setPost] = useState({})\r\n\r\n    const [fetchPostById, isLoading, error] = useFetching(async (id) => {\r\n        const response = await PostService.getByID(params.id)\r\n        setPost(response.data)\r\n    })\r\n\r\n    useEffect(() => {\r\n        fetchPostById(params.id)\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {isLoading\r\n                ? <Preloader />\r\n                : <div>\r\n                    <h2>\r\n                        {post.id + '. '}\r\n                        {post.title}\r\n                    </h2>\r\n                    <div>\r\n                        {post.body}\r\n                    </div>\r\n                </div>\r\n            }\r\n        </>\r\n    )\r\n}\r\n","import './App.css';\nimport { Route, Routes } from \"react-router-dom\";\nimport Header from \"./Components/Header\";\nimport Posts from \"./pages/Posts\"\nimport OpenPost from './pages/OpenPost';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Routes>\n        <Route exact path=\"/react_pr2\" element={<Posts /> } />\n        <Route exact path=\"/posts\" element={<Posts /> } />\n        <Route exact path=\"/posts/:id\" element={<OpenPost /> } />\n      </Routes>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { BrowserRouter } from 'react-router-dom';\n\nReactDOM.render(\n  <React.StrictMode>\n    <BrowserRouter>\n      <App />\n    </BrowserRouter>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}